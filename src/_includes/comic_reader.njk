<html>

<head>
    <link rel="preconnect" href="https://fonts.gstatic.com/" crossorigin="" />
    <link rel="stylesheet" as="style" onload="this.rel='stylesheet'"
        href="https://fonts.googleapis.com/css2?display=swap&amp;family=Be+Vietnam+Pro%3Awght%40400%3B500%3B700%3B900&amp;family=Noto+Sans%3Awght%40400%3B500%3B700%3B900" />

    <title>STEMRider.xyz | Inspiring communities across Nigeria through STEM projects and adventures</title>
    <link rel="icon" type="image/x-icon" href="data:image/x-icon;base64," />

    <script src="https://cdn.tailwindcss.com?plugins=forms,container-queries"></script>
</head>

<body>
    <div class="relative flex size-full min-h-screen flex-col bg-white group/design-root overflow-x-hidden"
        style='font-family: "Be Vietnam Pro", "Noto Sans", sans-serif;'>
        <div class="layout-container flex h-full grow flex-col">

            {% include "header.njk" %}

            <div class="px-40 flex flex-1 justify-center py-5">
          <div class="layout-content-container flex flex-col max-w-[960px] flex-1">
            <!-- <div class="flex flex-wrap gap-2 p-4">
              <a class="text-[#60758a] text-base font-medium leading-normal" href="resources.html">Resources</a>
              <span class="text-[#60758a] text-base font-medium leading-normal">/</span>
              <span class="text-[#111418] text-base font-medium leading-normal">Comics</span>
            </div> -->
            <h2 class="text-[#111418] tracking-light text-[28px] font-bold leading-tight px-4 text-left pb-3 pt-5">Comic Reader - {{ title }}</h2>
            <p class="text-[#111418] text-base font-normal leading-normal pb-3 pt-1 px-4">
              <b>Synopsis:</b> {{ description }}
                {{ content | safe }}
            </p>

              {# Display cover or comic page. Default to cover. #}
              
              <div class="flex w-full justify-center py-4">
                {# Default cover display #}
                <div id="comic-display-cover" class="w-full max-w-[800px] aspect-[3/2] bg-center bg-no-repeat bg-contain border rounded-lg" 
                     style='background-image: url("{{ cover }}");' 
                     aria-label="Comic Cover"></div>
                
                {# Hidden SVG containers for each page #}
                {% for pageNum, svgPath in pages %}
                <object id="comic-display-{{ pageNum }}" type="image/svg+xml" data="/{{ svgPath }}" 
                        class="w-full max-w-[800px] aspect-[3/2] hidden" 
                        aria-label="Comic Page {{ pageNum }}"></object>
                {% endfor %}
              </div>


            <div class="flex items-center justify-center p-4">
                {# Navigation buttons: Cover + all comic pages #}
                <a id="nav-cover" class="comic-nav-btn text-sm font-bold leading-normal tracking-[0.015em] flex size-10 items-center justify-center text-[#111418] rounded-full bg-[#0d80f2] text-white mx-1"
                   href="#" data-page="cover" title="Cover Page">C</a>
                {% for pageNum, svgPath in pages %}
                  <a id="nav-{{ pageNum }}" class="comic-nav-btn text-sm font-bold leading-normal tracking-[0.015em] flex size-10 items-center justify-center text-[#111418] rounded-full bg-[#f0f2f5] mx-1"
                     href="#" data-page="{{ pageNum }}">{{ pageNum }}</a>
                {% endfor %}
            </div>
            <div class="flex justify-center">
              <div class="flex flex-1 gap-3 flex-wrap px-4 py-3 max-w-[480px] justify-center">
                <button id="prev-btn"
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#f0f2f5] text-[#111418] text-sm font-bold leading-normal tracking-[0.015em] grow"
                >
                  <span class="truncate">Previous Page</span>
                </button>
                <button id="next-btn"
                  class="flex min-w-[84px] max-w-[480px] cursor-pointer items-center justify-center overflow-hidden rounded-lg h-10 px-4 bg-[#0d80f2] text-white text-sm font-bold leading-normal tracking-[0.015em] grow"
                >
                  <span class="truncate">Next Page</span>
                </button>
              </div>
            </div>
          </div>
        </div>

            {% include "footer.njk" %}

        </div>
    </div>

<script>
// Comic Reader JavaScript
document.addEventListener('DOMContentLoaded', function() {
    const navButtons = document.querySelectorAll('.comic-nav-btn');
    const coverDisplay = document.getElementById('comic-display-cover');
    const pageDisplays = document.querySelectorAll('[id^="comic-display-"]:not(#comic-display-cover)');
    const nextBtn = document.getElementById('next-btn');
    const prevBtn = document.getElementById('prev-btn');
    
    // Define page order: cover, then pages in order
    const pageOrder = ['cover', {% for pageNum, svgPath in pages %}'{{ pageNum }}'{% if not loop.last %}, {% endif %}{% endfor %}];
    let currentPageIndex = 0;
    
    // Show specified page
    function showPage(pageId) {
        // Hide all displays
        coverDisplay.classList.add('hidden');
        pageDisplays.forEach(display => display.classList.add('hidden'));
        
        // Show selected display
        const targetDisplay = document.getElementById(`comic-display-${pageId}`);
        if (targetDisplay) {
            targetDisplay.classList.remove('hidden');
        } else if (pageId === 'cover') {
            coverDisplay.classList.remove('hidden');
        }
        
        // Update navigation button styles
        navButtons.forEach(btn => {
            btn.classList.remove('bg-[#0d80f2]', 'text-white');
            btn.classList.add('bg-[#f0f2f5]', 'text-[#111418]');
        });
        
        // Highlight active button
        const activeBtn = document.getElementById(`nav-${pageId}`);
        if (activeBtn) {
            activeBtn.classList.remove('bg-[#f0f2f5]', 'text-[#111418]');
            activeBtn.classList.add('bg-[#0d80f2]', 'text-white');
        }
        
        // Update current page index
        currentPageIndex = pageOrder.indexOf(pageId);
        
        // Update Next/Previous button states
        updateNavButtons();
    }
    
    // Update Next/Previous button appearance and functionality
    function updateNavButtons() {
        // Previous button
        if (currentPageIndex <= 0) {
            prevBtn.classList.add('opacity-50', 'cursor-not-allowed');
            prevBtn.disabled = true;
        } else {
            prevBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            prevBtn.disabled = false;
        }
        
        // Next button  
        if (currentPageIndex >= pageOrder.length - 1) {
            nextBtn.classList.add('opacity-50', 'cursor-not-allowed');
            nextBtn.disabled = true;
        } else {
            nextBtn.classList.remove('opacity-50', 'cursor-not-allowed');
            nextBtn.disabled = false;
        }
    }
    
    // Add click handlers to navigation buttons
    navButtons.forEach(button => {
        button.addEventListener('click', function(e) {
            e.preventDefault();
            const pageId = this.getAttribute('data-page');
            showPage(pageId);
            
            // Update URL without page reload
            const url = new URL(window.location);
            if (pageId === 'cover') {
                url.searchParams.delete('page');
            } else {
                url.searchParams.set('page', pageId);
            }
            window.history.pushState({}, '', url);
        });
    });
    
    // Previous button click handler
    prevBtn.addEventListener('click', function() {
        if (currentPageIndex > 0) {
            const prevPageId = pageOrder[currentPageIndex - 1];
            showPage(prevPageId);
            
            // Update URL
            const url = new URL(window.location);
            if (prevPageId === 'cover') {
                url.searchParams.delete('page');
            } else {
                url.searchParams.set('page', prevPageId);
            }
            window.history.pushState({}, '', url);
        }
    });
    
    // Next button click handler
    nextBtn.addEventListener('click', function() {
        if (currentPageIndex < pageOrder.length - 1) {
            const nextPageId = pageOrder[currentPageIndex + 1];
            showPage(nextPageId);
            
            // Update URL
            const url = new URL(window.location);
            url.searchParams.set('page', nextPageId);
            window.history.pushState({}, '', url);
        }
    });
    
    // Check URL on page load for direct links
    const urlParams = new URLSearchParams(window.location.search);
    const initialPage = urlParams.get('page') || 'cover';
    showPage(initialPage);
});
</script>

</body>

</html>